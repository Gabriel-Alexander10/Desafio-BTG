{"version":3,"sources":["webpack:///./src/lib/components/Graph.react.js"],"names":["Graph","props","id","label","setProps","value","Component","console","log","e","target","defaultProps","propTypes","PropTypes","string","isRequired","func","node"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;IACqBA,K;;;;;;;;;;;;;WACjB,kBAAS;AACL,wBAAgD,KAAKC,KAArD;AAAA,UAAOC,EAAP,eAAOA,EAAP;AAAA,UAAWC,KAAX,eAAWA,KAAX;AAAA,UAAkBC,QAAlB,eAAkBA,QAAlB;AAAA,UAA4BC,KAA5B,eAA4BA,KAA5B;AAAA,UAAmCC,SAAnC,eAAmCA,SAAnC;AAEAC,aAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,SAAzB;AAEA,0BACI;AAAK,UAAE,EAAEJ;AAAT,+BACuBC,KADvB,uBAEI;AACI,aAAK,EAAEE,KADX;AAEI,gBAAQ;AACJ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB,0BAAAI,CAAC;AAAA,iBAAIL,QAAQ,CAAC;AAAEC,iBAAK,EAAEI,CAAC,CAACC,MAAF,CAASL;AAAlB,WAAD,CAAZ;AAAA;AAZT,QAFJ,CADJ;AAsBH;;;;EA5B8BC,+C;;;AA+BnCN,KAAK,CAACW,YAAN,GAAqB,EAArB;AAEAX,KAAK,CAACY,SAAN,GAAkB;AACd;AACJ;AACA;AACIV,IAAE,EAAEW,iDAAS,CAACC,MAJA;;AAMd;AACJ;AACA;AACIX,OAAK,EAAEU,iDAAS,CAACC,MAAV,CAAiBC,UATV;;AAWd;AACJ;AACA;AACIV,OAAK,EAAEQ,iDAAS,CAACC,MAdH;;AAgBd;AACJ;AACA;AACA;AACIV,UAAQ,EAAES,iDAAS,CAACG,IApBN;AAqBdV,WAAS,EAAEO,iDAAS,CAACI;AArBP,CAAlB,C","file":"b775054-main-wps-hmr.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * ExampleComponent is an example component.\r\n * It takes a property, `label`, and\r\n * displays it.\r\n * It renders an input with the property `value`\r\n * which is editable by the user.\r\n */\r\nexport default class Graph extends Component {\r\n    render() {\r\n        const {id, label, setProps, value, Component} = this.props;\r\n\r\n        console.log(\"Component\", Component)\r\n\r\n        return (\r\n            <div id={id}>\r\n                ExampleComponent: {label}&nbsp;\r\n                <input\r\n                    value={value}\r\n                    onChange={\r\n                        /*\r\n                         * Send the new value to the parent component.\r\n                         * setProps is a prop that is automatically supplied\r\n                         * by dash's front-end (\"dash-renderer\").\r\n                         * In a Dash app, this will update the component's\r\n                         * props and send the data back to the Python Dash\r\n                         * app server if a callback uses the modified prop as\r\n                         * Input or State.\r\n                         */\r\n                        e => setProps({ value: e.target.value })\r\n                    }\r\n                />\r\n\r\n                {/* <Component /> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nGraph.defaultProps = {};\r\n\r\nGraph.propTypes = {\r\n    /**\r\n     * The ID used to identify this component in Dash callbacks.\r\n     */\r\n    id: PropTypes.string,\r\n\r\n    /**\r\n     * A label that will be printed when this component is rendered.\r\n     */\r\n    label: PropTypes.string.isRequired,\r\n\r\n    /**\r\n     * The value displayed in the input.\r\n     */\r\n    value: PropTypes.string,\r\n\r\n    /**\r\n     * Dash-assigned callback that should be called to report property changes\r\n     * to Dash, to make them available for callbacks.\r\n     */\r\n    setProps: PropTypes.func,\r\n    Component: PropTypes.node\r\n};\r\n"],"sourceRoot":""}